datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.js"
  // provider = "prisma-dbml-generator"
}

// User Management
enum UserRole {
  SUPER_ADMIN
  CASHIER
  EMPLOYEE
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  email         String         @unique
  password      String
  name          String
  role          UserRole
  active        Boolean        @default(true)
  lastLogin     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  transactions  Transaction[]
  serviceOrders ServiceOrder[]
}

// Inventory Management
enum ProductCategory {
  OIL
  SPARE_PART
  SERVICE_TOOL
  ACCESSORY
}

model Product {
  id               String            @id @default(cuid())
  name             String
  barcode          String?           @unique
  category         ProductCategory
  price            Decimal           @db.Decimal(10, 2)
  costPrice        Decimal           @db.Decimal(10, 2)
  stock            Int
  minStockLevel    Int
  unit             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  transactionItems TransactionItem[]
  serviceItems     ServiceItem[]
}

// Customer Management
model Customer {
  id               String         @id @default(cuid())
  name             String
  phone            String?
  email            String?
  address          String?
  membershipPoints Int            @default(0)
  serviceOrders    ServiceOrder[]
  transactions     Transaction[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// Transaction Management
model Transaction {
  id             String            @id @default(cuid())
  customer       Customer?         @relation(fields: [customerId], references: [id])
  customerId     String?
  user           User              @relation(fields: [userId], references: [id])
  userId         String
  totalAmount    Decimal           @db.Decimal(10, 2)
  discountAmount Decimal           @default(0) @db.Decimal(10, 2)
  paymentMethod  String
  items          TransactionItem[]
  createdAt      DateTime          @default(now())
}

model TransactionItem {
  id            String      @id @default(cuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int
  unitPrice     Decimal     @db.Decimal(10, 2)
  subtotal      Decimal     @db.Decimal(10, 2)
}

// Service Management
enum ServiceStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  DELIVERED
}

model ServiceOrder {
  id               String        @id @default(cuid())
  customer         Customer      @relation(fields: [customerId], references: [id])
  customerId       String
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  vehicleType      String
  vehicleNumber    String
  issueDescription String
  status           ServiceStatus @default(WAITING)
  estimatedCost    Decimal       @db.Decimal(10, 2)
  actualCost       Decimal?      @db.Decimal(10, 2)
  items            ServiceItem[]
  createdAt        DateTime      @default(now())
  completedAt      DateTime?
}

model ServiceItem {
  id             String       @id @default(cuid())
  serviceOrder   ServiceOrder @relation(fields: [serviceOrderId], references: [id])
  serviceOrderId String
  product        Product?     @relation(fields: [productId], references: [id])
  productId      String?
  description    String
  quantity       Int          @default(1)
  unitPrice      Decimal      @db.Decimal(10, 2)
  subtotal       Decimal      @db.Decimal(10, 2)
}
